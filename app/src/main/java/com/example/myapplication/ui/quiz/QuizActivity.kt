package com.example.myapplication.ui.quiz

import android.graphics.Color
import android.os.Bundle
import android.view.View
import android.widget.TextView
import androidx.activity.addCallback
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.example.myapplication.R
import com.google.android.material.button.MaterialButton
import com.google.android.material.card.MaterialCardView
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.android.material.progressindicator.LinearProgressIndicator

class QuizActivity : AppCompatActivity() {

    // Î∑∞
    private lateinit var progress: LinearProgressIndicator
    private lateinit var tvPercent: TextView
    private lateinit var tvQuestion: TextView

    private lateinit var choice1: MaterialCardView
    private lateinit var tvChoice1: TextView
    private lateinit var choice2: MaterialCardView
    private lateinit var tvChoice2: TextView
    private lateinit var choice3: MaterialCardView
    private lateinit var tvChoice3: TextView

    private lateinit var explanationContainer: View
    private lateinit var tvExplanation: TextView
    private lateinit var feedbackBar: View
    private lateinit var tvFeedback: TextView
    private lateinit var btnContinue: MaterialButton
    private var skipAutoSave = false
    private lateinit var ivJudge: android.widget.ImageView

    // ÏßÑÌñâ ÏÉÅÌÉú (currentÎäî 1-based Î¨∏Ï†ú Ïù∏Îç±Ïä§)
    private var current = 1
    private var answered = false
    private var isCorrect = false
    private lateinit var courseId: String

    // ÎçîÎØ∏ Î¨∏Ï†ú (ÏÑúÎ≤Ñ Ïó∞Îèô Ï†Ñ)
    private data class QuizItem(
        val question: String,
        val choices: List<String>,
        val answerIndex: Int,
        val explanation: String
    )

    private val items = listOf(
        QuizItem("ÏÇ¨Í≥ºÏùò ÏòÅÏñ¥Îäî?", listOf("Apple", "Banana", "Grape"), 0, "ÏÇ¨Í≥ºÎäî Apple."),
        QuizItem("Ìè¨ÎèÑÏùò ÏòÅÏñ¥Îäî?", listOf("Orange", "Grape", "Melon"), 1, "Ìè¨ÎèÑÎäî Grape."),
        QuizItem("Î∞îÎÇòÎÇòÏùò ÏòÅÏñ¥Îäî?", listOf("Banana", "Apple", "Peach"), 0, "Î∞îÎÇòÎÇòÎäî Banana."),
        QuizItem("Ïò§Î†åÏßÄÏùò ÏòÅÏñ¥Îäî?", listOf("Berry", "Orange", "Lemon"), 1, "Ïò§Î†åÏßÄÎäî Orange."),
        QuizItem("Î≥µÏà≠ÏïÑÏùò ÏòÅÏñ¥Îäî?", listOf("Peach", "Pear", "Plum"), 0, "Î≥µÏà≠ÏïÑÎäî Peach.")
    )

    // ‚úÖ ÌïòÎìúÏΩîÎìú ÎåÄÏã† Ïã§Ï†ú Î¨∏Ìï≠ Ïàò ÏÇ¨Ïö©
    private val total get() = items.size

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_quiz)

        courseId = intent.getStringExtra(CourseIds.EXTRA_COURSE_ID) ?: CourseIds.COMP_BASIC

        bindViews()
        setupProgress()
        bindChoiceClicks()

        val (savedIndex, savedSolved) = ProgressStore.load(this, courseId)
        // ‚úÖ ÏôÑÎ£å ÏÉÅÌÉúÍ±∞ÎÇò ÎßàÏßÄÎßâ Ïù∏Îç±Ïä§Ïóê Í±∏Î†§ ÏûàÏúºÎ©¥ Î¨¥Ï°∞Í±¥ Î¶¨ÏÖã
        if (savedSolved >= total || savedIndex >= total) {
            current = 1
            answered = false
            ProgressStore.save(this, courseId, currentIndex = 1, solvedCount = 0)
        } else {
            current = savedIndex.coerceIn(1, total)
        }

        renderQuestion()
        updateProgress()

        onBackPressedDispatcher.addCallback(this) { showExitConfirmDialog() }
    }


    private fun currentCourseId(): String = intent.getStringExtra("courseId") ?: "default"

    private fun bindViews() {
        progress = findViewById(R.id.progressQuiz)
        tvPercent = findViewById(R.id.tvProgressPercent)
        tvQuestion = findViewById(R.id.tvQuestion)

        ivJudge = findViewById(R.id.ivJudge)
        choice1 = findViewById(R.id.choice1)
        tvChoice1 = findViewById(R.id.tvChoice1)
        choice2 = findViewById(R.id.choice2)
        tvChoice2 = findViewById(R.id.tvChoice2)
        choice3 = findViewById(R.id.choice3)
        tvChoice3 = findViewById(R.id.tvChoice3)

        explanationContainer = findViewById(R.id.explanationContainer)
        tvExplanation = findViewById(R.id.tvExplanation)
        feedbackBar = findViewById(R.id.feedbackBar)
        tvFeedback = findViewById(R.id.tvFeedback)
        btnContinue = findViewById(R.id.btnContinue)

        btnContinue.setOnClickListener {
            if (!answered) return@setOnClickListener

            if (current < total) {
                current += 1
                hideFeedbacks()
                renderQuestion()
                updateProgress()
                btnContinue.text = if (current == total) "ÏôÑÎ£å" else "Îã§Ïùå Î¨∏Ï†ú"

                // üîÅ ÏßÑÌñâ Ï§ë Ï†ÄÏû•
                ProgressStore.save(this, courseId, currentIndex = current, solvedCount = solvedSoFar())
            } else {
                // ÎßàÏßÄÎßâ Î¨∏Ï†ú ‚Üí ÌôîÎ©¥ 100% Î®ºÏ†Ä
                progress.setProgressCompat(total, true)
                tvPercent.text = "100%"
                showCompletion()
            }
        }

    }

    private fun setupProgress() {
        progress.max = total
        // ÏãúÏûë Ïãú Ïù¥ÎØ∏ Ìëº Í∞úÏàòÎ°ú ÌëúÏãú (currentÎäî 1-based)
        updateProgress()
        btnContinue.text = if (current == total) "ÏôÑÎ£å" else "Îã§Ïùå Î¨∏Ï†ú"
    }
    private fun solvedSoFar(): Int {
        val base = (current - 1).coerceAtLeast(0)  // Ïù¥Ï†ÑÍπåÏßÄ ÏôÑÏ†ÑÌûà ÎÅùÎÇ∏ Í∞úÏàò
        val extra = if (answered) 1 else 0         // ÌòÑÏû¨ Î¨∏Ï†úÎ•º Ïù¥ÎØ∏ ÌíÄÏóàÎã§Î©¥ +1
        return (base + extra).coerceAtMost(total)
    }
    // ‚úÖ ÏßÑÌñâÎèÑÎäî ‚ÄúÌëº Î¨∏Ï†ú Ïàò = current - 1‚Äù Î°ú ÌëúÏãú
    private fun updateProgress() {
        val solved = solvedSoFar()
        progress.setProgressCompat(solved, true)
        val pct = if (total == 0) 0 else (solved.toFloat() / total * 100).toInt()
        tvPercent.text = "$pct%"
    }


    private fun bindChoiceClicks() {
        choice1.setOnClickListener { onChoiceSelected(0) }
        choice2.setOnClickListener { onChoiceSelected(1) }
        choice3.setOnClickListener { onChoiceSelected(2) }
    }

    private fun onChoiceSelected(selectedIndex: Int) {
        if (answered) return
        handleAnswer(selectedIndex)
    }

    private fun handleAnswer(selectedIndex: Int) {
        if (answered) return
        answered = true

        val item = items[current - 1]
        val correctIndex = item.answerIndex
        isCorrect = (selectedIndex == correctIndex)

        feedbackBar.visibility = View.VISIBLE

        if (isCorrect) {
            tvFeedback.text = "Ï†ïÎãµÏù¥ÏóêÏöî! ÏûòÌñàÏñ¥"
            tvFeedback.setTextColor(ContextCompat.getColor(this, R.color.brand_primary))
            ivJudge.setImageResource(R.drawable.quit3)
            ivJudge.visibility = View.VISIBLE
            explanationContainer.visibility = View.GONE
            tvExplanation.text = ""
        } else {
            tvFeedback.text = "ÏïÑÏâΩÎã§! Ïò§ÎãµÏù¥ÏóêÏöî"
            tvFeedback.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))
            ivJudge.setImageResource(R.drawable.quit4)
            ivJudge.visibility = View.VISIBLE
            tvExplanation.text = item.explanation
            explanationContainer.visibility = View.VISIBLE
        }

        renderChoicesResult(selectedIndex, correctIndex)
    }

    private fun renderQuestion() {
        val item = items[current - 1]
        tvQuestion.text = item.question
        tvChoice1.text = item.choices[0]
        tvChoice2.text = item.choices[1]
        tvChoice3.text = item.choices[2]

        answered = false
        isCorrect = false
        hideFeedbacks()
        resetChoiceStyles()

        ivJudge.setImageResource(R.drawable.quit2)
        btnContinue.text = if (current == total) "ÏôÑÎ£å" else "Îã§Ïùå Î¨∏Ï†ú"
    }

    private fun hideFeedbacks() {
        explanationContainer.visibility = View.GONE
        tvExplanation.text = ""
        feedbackBar.visibility = View.GONE
        tvFeedback.text = ""
    }

    private fun resetChoiceStyles() {
        val stroke = (1 * resources.displayMetrics.density).toInt()
        listOf(
            choice1 to tvChoice1,
            choice2 to tvChoice2,
            choice3 to tvChoice3
        ).forEach { (card, tv) ->
            card.setCardBackgroundColor(Color.WHITE)
            card.strokeWidth = stroke
            card.strokeColor = Color.parseColor("#E5E5E5")
            tv.setTextColor(Color.parseColor("#222222"))
            tv.setCompoundDrawables(null, null, null, null)
        }
    }

    private fun renderChoicesResult(selectedIndex: Int, correctIndex: Int) {
        fun styleCorrect(card: MaterialCardView, tv: TextView) {
            card.setCardBackgroundColor(ContextCompat.getColor(this, R.color.brand_light_bg))
            card.strokeWidth = 0
            tv.setTextColor(ContextCompat.getColor(this, R.color.brand_primary))
        }

        fun styleWrong(card: MaterialCardView, tv: TextView) {
            card.setCardBackgroundColor(Color.parseColor("#FFF1F1"))
            card.strokeWidth = 0
            tv.setTextColor(ContextCompat.getColor(this, android.R.color.holo_red_dark))
        }

        when (correctIndex) {
            0 -> styleCorrect(choice1, tvChoice1)
            1 -> styleCorrect(choice2, tvChoice2)
            2 -> styleCorrect(choice3, tvChoice3)
        }
        if (selectedIndex != correctIndex) {
            when (selectedIndex) {
                0 -> styleWrong(choice1, tvChoice1)
                1 -> styleWrong(choice2, tvChoice2)
                2 -> styleWrong(choice3, tvChoice3)
            }
        }
    }

    private fun showExitConfirmDialog() {
        MaterialAlertDialogBuilder(this)
            .setTitle("ÌÄ¥Ï¶à ÎÇòÍ∞ÄÍ∏∞")
            .setMessage("ÎÇòÍ∞ÄÎ©¥ ÏßÑÌñâ ÏÉÅÌô©Ïù¥ Ï†ÄÏû•ÎèºÏöî. ÎÇòÍ∞àÍπåÏöî?")
            .setNegativeButton("Ï∑®ÏÜå") { d, _ -> d.dismiss() }
            .setPositiveButton("ÎÇòÍ∞ÄÍ∏∞") { d, _ ->
                d.dismiss()
                // ‚úÖ ÏßÄÍ∏àÍπåÏßÄ Ìëº Í∞úÏàò Í∏∞Ï§ÄÏúºÎ°ú Ï†ÄÏû• (ÎßàÏßÄÎßâ Î¨∏Ï†ú ÌíÄÍ≥† Î∞îÎ°ú ÎÇòÍ∞ÄÎèÑ 100%)
                ProgressStore.saveSync(
                    this, courseId,
                    currentIndex = current,           // ÏúÑÏπòÎäî ÌòÑÏû¨ Î¨∏Ï†ú
                    solvedCount = solvedSoFar()       // Í∞úÏàòÎäî Ìëº ÎßåÌÅº(ÏµúÎåÄ total)
                )
                finish()
            }
            .show()
    }

    private fun showCompletion() {
        MaterialAlertDialogBuilder(this)
            .setTitle("ÌÄ¥Ï¶à ÏôÑÎ£å")
            .setMessage("Î™®Îì† Î¨∏Ï†úÎ•º Îã§ ÌíÄÏóàÏñ¥Ïöî! Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú ÌíÄÍπåÏöî?")
            .setNegativeButton("Îã´Í∏∞") { d, _ ->
                d.dismiss()
                skipAutoSave = true
                // ‚úÖ Î©îÏù∏ 100% Î≥¥Ïù¥ÎèÑÎ°ù ÌôïÏ†ï Í∏∞Î°ù
                ProgressStore.saveSync(this, courseId, currentIndex = total, solvedCount = total)
                finish()
            }
            .setPositiveButton("Îã§Ïãú ÌíÄÍ∏∞") { d, _ ->
                d.dismiss()
                skipAutoSave = false
                current = 1
                answered = false
                ProgressStore.save(this, courseId, currentIndex = 1, solvedCount = 0)

                hideFeedbacks()
                resetChoiceStyles()
                renderQuestion()
                updateProgress() // 0%
                btnContinue.text = "Îã§Ïùå Î¨∏Ï†ú"
            }
            .show()
    }

    override fun onPause() {
        super.onPause()
        if (skipAutoSave) return
        // ‚úÖ Ìï≠ÏÉÅ solvedSoFar()Î°ú Ï†ÄÏû•
        ProgressStore.save(this, courseId, currentIndex = current, solvedCount = solvedSoFar())
    }
}